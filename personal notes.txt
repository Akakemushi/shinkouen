Notes for the Shinkoen Website and general learning from the experience.

Ruby has an operator that looks like this...    ||=     ...and it is shorthand for this...   a = a || b   -->  a ||= b
what it does is check if the first variable, "a", is nil or not.  If it is, it sets the value to b.  However if has already been initialized with some variable,
then it remains as is.  This is used to avoid recalculating things that don't need to be recalculated. This saves processing time, and is known as "memoizing" or "memoization"
something I have seen like this before exists on Roll20.  When you create a power with a roll query, any time you repeat that exact same roll query within the same
roll, instead of rolling again, it just uses the result that was input by the user the first time, since it already has a value for that variable.

Models recommended for setting up an online shop are:
1. the product model (teapot)
2. the cart model (temporary storage for items, does not get saved in db)
3. the order model (just like cart model, but only created once checkout is confirmed, saved in db, joins a user to a group of line items)
4. the "Line Item" model (join table for items and orders, saved in db)
5. the category model (maybe optional? used to organize items better somehow...come back later)
6. the user model (self explanatory, but can include an "annoymous" function to handle those without accounts)
7. the review model (self explanatory)

Pagy Installation
first you need the gem, then you need to follow some installation steps (which I forgot)
right now I'm troubleshooting...
First you need to include the line "include Pagy::Frontend" in the relevant "helper" module.
also, I seem to require two files, pagy.js and pagy.css, which I had to manually create inside the app/javascript  and app/assets/stylesheets folders respectively... the files are blank, but that's ok I guess?

Money Installation Notes
When making a shopping site, you will typically need both the "money" and "money-rails" gems.  Not sure of the details, but "money" seems to provide
core functionality, while "money-rails" adds some other features.  It also seems (according to AI) that if you add "money-rails" that "money" will also
get installed because the former depends on the latter to function.
Once you bundle those gems, activate them with this line...    rails g money_rails:initializer
I should also note that you should NOT add a "price" column to the table in the beginning.  Wait until AFTER you have the gem installed, and then use
the gem version of the "price" column instead.  Otherwise it's a hassle to undo the previous and redo a new one. (trust old me)
Another thing about this system.  In the schema, you'll see "price_cents", and maybe something "currency", yet in the view's .erb file, you will
reference these by doing teapot.price   WITHOUT the _cents.  This is something that the gem is handling.  It returns a money object instead of a
straight integer.

Stripe Payment System Notes
First you'll need to create an account that will be linked to the payments.  It needs a name and an email.  From that you'll get .env keys.
Next get the "stripe" gem and bundle install.       Next put this in the initializer file
Rails.configuration.stripe = {
  publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
  secret_key:      ENV['STRIPE_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]

Questions for Stripe Devs:
1. In the Stripe initializer file, do I need to include the line  "Stripe.api_version = '2024-06-20'", and also, do I also need to add something like "embedded_checkout_beta=v2", as shown on the youtube tutorial?
2.

picture filename are CaSe SenSiTive!  Even the .suffix!  .PNG does NOT equal .PNG

==============Q U I C K   L O O K U P S======================
- gco -b name     to create a new branch.  Need the -b for a new one.

==============P  R  O  B  L  E  M  S===================


ISSUE: new SCSS files stop working even after hard refreshing, styles aren't applied at all.
FIXED: try closing the server and running     rails assets:clobber     in the cli, then restart the server.

ISSUE:  Money.new(teapot.price, "JPY").format   seems to return a string, however when I try to modify the array, I can't save a string to an integer field.  It reads as a zero when displayed
FIXED:  Altered the MODEL by adding a method which returns the formated string version of its own price.

ISSUE:  Getting rid of the lame underlines on hyperlinks
FIXED:  You need to set text-decoration: none; on NOT ONLY the tag, but also its variants  a:visited   a:link   a:hover    a:active

ISSUE:  <p> elements that are children (not even direct children) of a wrapping link are being styled/decorated like links.
FIXED:  I changed the root design of <a> and <p> tags in the main stylesheet. That seemed to overwrite the problem.

ISSUE:  Trying to implement a fading carousel for the index page, but having lots of issues.  Currently working on "carousel" branch.  GPT says use
    Jquery, but I can't seem to get that to work?  browser console doesn't recognize the $ needed in Jquery.
FIXED:  To install Jquery in Rails 7, first you need the gem "jquery-rails", then you need to put this line in the "importmap.rb" file...
     pin "jquery", to: "https://code.jquery.com/jquery-3.6.0.min.js" (you can find the file in the config folder), and finally, you need to put
     import "jquery"    in the .js files that will use jquery.  (i think that's all the steps, in your main .erb file, <%= javascript_importmap_tags %>
     should already be there by default)

ISSUE:  I have a bunch of stuff inside of a div, including a carousel, however the carousel is not included within the div's boundaries for some reason.
FIXED:  My fault.  I had one of the children divs set specifically to height 500px, and the carousel was INSIDE that one.  Getting rid of the 500px limit fixed it.

ISSUE:  Not sure where to register the Stimulus Controller... there are TWO files called application.js
FIXED:  In Rails 7, it's the one INSIDE the Controllers folder.  Add an "import" statement right under the "import {application} line, and
        add a line      Stimulus.register("teapot-slides", TeapotSlidesController); AFTER this stuff --> const application = Application.start(); application.debug = false; window.Stimulus   = application;

ISSUE:  Was getting an error in the browser console "TypeError: Failed to resolve module specifier "stimulus". Relative references must start with either "/", "./", or "../".
FIXED:  Caused by a controller file I made, at the top I had simply "stimulus", but I needed "@hotwired/stimulus"

ISSUE:  Stimulus related action works on page refresh, but not after that. Console gives the message SyntaxError: Unexpected token '<', "<!DOCTYPE "... is not valid JSON
FIXED:  Very difficult tbh.  This can happen when the state of the running JavaScript and the state of the running Ruby on the server don't match.
        It can happen for a number of reasons.  One is that Javascript is expecting to get a particular data format, either JSON or HTML, but it gets
        an unexpected data type.  To fix, make sure you handle different kinds of responses from the server appropriately.  Another thing that can happen
        is that the JavaScript simply isn't updating the page correctly after getting a response from the server. In this case the fix isn't simple. It can
        also happen if the request made to the server is bad, either the wrong URL, or the wrong method (Post, Get, Delete, etc).  Basically when you
        use Javascript, it is a separate "program" from the server, and if the two are trying to talk about the same piece of shared data, but the value
        of that data is one thing on one side and another thing on the other side, you'll get this issue.  Refreshing the page reconnects and syncs everything.

ISSUE:  The "Sign-Out" button I made on the navbar was not working.  Rails gave an error because I sent a "GET" method request when a "DELETE" was needed.
FIXED:  The issue stems from Rails being updated to use Turbo instead of something called "Rails UJS", which was a javascript library that somehow integrated
        Javascript further with Rails.  You usually need to add "method: :delete" into the .erb file in the stimulus, but that doesn't work anymore.
        The current way uses turbo, and sets the method via a data attribute like this... data: { "turbo-method": :delete }   once I changed that, it worked.

ISSUE:  Stimulus controller isn't updating the total price after removing an item from cart.  Get a console error "cart_page_item_remove_controller.js:52
        Missing target element 'totalPrice' for 'cart-page-item-remove' controller."
FIXED:  ChatGPT doesn't seem to realize that the element you put the data-controller on has to encapsulate EVERYTHING that it needs in order for the
        stimulus controller to "see" it.  GPT just put a bunch of controllers everywhere, including controllers within controllers....wtf?  I removed
        the inner controllers, put the main controller on a surrounding div, and then everything worked.

ISSUE:  Getting a Uncaught (in promise): ReferenceError: Stripe is not defined. error. Something about Stripe not being a stylesheet.
FIXED:  Check the tags in your <head> area or wherever stripe.js/v3/ is being loaded.  I had it within a stylesheet tag, but this isnt a css file, its javascript
        changing the html tag from stylesheet to <script> (or the Rails helper equivalent) fixed the issue.

ISSUE:  This Rails error...   Association named 'cart_items' was not found on Teapot; perhaps you misspelled it?
FIXED:  Yes, I indeed misspelled it.  It was supposed to just be "cart_item" because in this case I had a "has one" relationship, not a "has many".  The teapots
        are each unique, so it doesnt make sense to allow a teapot to be in multiple baskets.

ISSUE:  After filling out the credit card info and clicking pay on the Stripe form, I don't get redirected to a confirmation page, the @order that the controller
        tries to find comes back nil.  I think it is due to the order never being created in the first place... we'll see.
FIXED:  Not exactly.  It was being created, but the way I was trying to search for it was through 2 parameters, one of which wasn't even initialized, so
        of course it couldn't be found when searched for.

ISSUE:  "in_stock" variable not being updated after using .update!
FIXED:  the issue was that I was querying for the teapots to update through the "order_items" join table, however in the creation of the order itself, i
        neglected to actually create the order_item objects that were associated with it, hence the query returned nil, and you can't modify nil.  It was
        a bitch to find the problem though.

ISSUE:  Flash notices and alerts aren't working.
FIXED:  I was half-right.  The flashes were working for successes, but not failures.  A few notes here.  First, flashes need to be enabled in the main
        application.html.erb, somewhere in the <body>, outside of the yield.  Second, Turbo Forms and Flash errors do not play nice together.  If you
        want flash errors to pop up when some form submission goes wrong, you need to disable Turbo on the form you're submitting.

ISSUE:  Javascript-controlled dialogue box for teapot deletion displays that there was a problem, even though there was no problem and it got
        properly deleted.
FIXED:  Really hard one.  Issue stemmed from a redirect that was happening on success which is a status code in the 300 range, not 200... which
        apparently confuses the "fetch()" method in JavaScript.  The fix was by adding a few lines in the JS code to account for redirects when they
        occur, such as the line     redirect: 'follow'     in the header info sent by the fetch request, and also the "if" branch   if (response.redirected) {
        // If the response was redirected, navigate to the new URL
        window.location.href = response.url;
        for your reference (and as far as I can tell) the fetch method seems to be a way for JavaScript code to make http requests using the keywords
        POST, GET, DELETE, UPDATE, etc. and it's followed by a .then  block to handle and parse the response from the server.  The server (should?)
        send back some info which the fetch method wraps in a "Response" object.  You have to parse that object using the appropriate format, such as
        .text()  .json()   .blob()   These things weren't directly related to the problem, but are important for future builds.

ISSUE:  Can't find a way to remove just one or a few cloudinary images from a teapot entry (editing functionality).  I can delete ALL of them, but not just a few.
FIXED:  The issue wasn't that I couldn't remove only a few of the images, the issue was that after the images were removed, there was a BLANK list of images
        to attach to the teapot, which overwrote the ones that were still there.  So the issue was with overwriting existing images with nothing.  Having the
        line...    if @teapot.update(teapot_params.except(:images))     ... was the key, specifically that   .except(:images) part.

ISSUE:  Data values from HTML not being passed to the this.data.get() method in a Javascript controller.  No matter what I try, it keeps resolving to
        either null or a blank array.
FIXED:  OMG Such a hard nut to crack!!  Again, more Stimulus problems... this time the issue was partly my fault for being lazy, and partly ChatGPTs fault
        for giving me crap code.  If I had just looked up the tutorials on Kitt, I could have avoided this... ANYWAY!  The fucking fix was to NOT use
        this.data.get() in the first place!!  More recent versions of stimulus have that "static values" thing at the top, which I totally did not use,
        and instead spent about 3 to 4 hours banging my head against a wall to figure it out... Ugh.  Once I put GPT on the right path it came up with
        the code EASILY.  Jesus, what a waste of time.
ISSUE:  I can't figure out how to add classes to those stupid Simple Forms in .erb... so annoying.
FIXED:  Here's how you add a class.  First of all, note that when you use f.input, it generates a DIV automatically.  So double check to make sure if it's
        that wrapper div or something else that you want to add a class to.  For the wrapper div, add this line into the simple-form stuff...
        wrapper_html: { class: "your-class-here" }       and then maybe a comma after that line if more follows.


TODO list
Style the New Teapot page
Style the Edit Teapot page
Style the Search Bar
Fix the style of the Edit Teapot link button on the show page
Go over creation and edit forms and see if any fields need to be kept/removed.

Maybe TODO list
add an "about us" page?  What should that look like?  What should be on it?
something to do with shipping info?
Hyper links to extra static pages that explain certain teapot concepts? Like how certain types are fired, the clay, etc...


Tousan Notes
If priced over, 5man over, show more photos
photos should automatically rotate

many photos with only picture, price, and artist
each picture should automatically switch when hovered over,
at least 3 photos,
one is from the Frontend
one is with the lid open
one is the maker's maker


old index html code--------
<div class="all-teapots-container">
      <% @teapots.each do |teapot| %>
        <div class="teapot-card">
          <div class="card-picture">
            <%= cl_image_tag(teapot.images.first.key, width: 300, height: 300, crop: :fill) %>
          </div>
          <div class="card-info-container">
            <div class="visual-info-boxes-container">
              <div class="dimension-box">
                <%= image_tag "dimensions.png" %>
                <p class="teapot-height-text"><%= teapot.height / 10.to_f %> cm</p>
                <p class="teapot-width-text"><%= teapot.width / 10.to_f %> cm</p>
                <p class="teapot-depth-text"><%= teapot.depth / 10.to_f %> cm</p>
              </div>
              <div class="capacity-box"><%= image_tag "capacity.png" %>
                <p class="teapot-ccs-text"><%= teapot.ccs %> cc</p>
              </div>
              <div class="weight-box"><%= image_tag "weight.png" %>
                <p class="teapot-weight-text"><%= teapot.weight %> g</p>
              </div>
            </div>
            <div class="teapot-info-lower-half">
              <div class="text-only-info-container">
                <p class="teapot-price-text"><%= teapot.formatted_price %></p>
                <p class="teapot-maker-text">Artist:   <strong><%= teapot.maker %></strong></p>
              </div>
              <%= link_to "View Details", teapot_path(teapot), class: "teapot-link" %>
            </div>
          </div>
        </div>
      <% end %>
      <h2 class="paginator"><%= pagy_nav(@pagy).html_safe %></h2>
    </div>
    END OF OLD HTML CODE -----------

    NOTES ABOUT HOW STRIPE WORKS
    -Stripe uses 2 things, "Products" and "Prices".
    -When starting out, you seem to need to import you catalog of products into Stripe.  The introduction
    given doesn't state directly that this is necessary, however it strongly aludes to that being the case.
    -There is something called a "multi-currency Price" that handles the same product sold in different currencies.
    -Products created in test mode can be copied over to live mode via the dashboard.  Be aware though that if you later make changes to the test mode
    version, those changes will NOT be reflected in the Live version.

    Explanation of the Stripe hash

    @session = Stripe::Checkout::Session.create(
      line_items: [{                                                              an array of the cart items. Each item in the cart should get its own hash, which includes name, unit amount and quantity.
        price_data: {                                                             for every teapot, there should be a new hash inside this [array]
          currency: "jpy",
          product_data: {
            name: "yokode_teapot",
          },
          unit_amount: 12345
        },
        quantity: 1
      }],
      mode: "payment",                                                            Note that you DO NOT need to calculate the total on your end. Stripe does that for you, even taking quantity into consideration
      ui_mode: "embedded",                                                        displaying it to the user.
      return_url: CGI.unescape(payment_url(session_id: '{CHECKOUT_SESSION_ID}'))
    )

    Questions for Stripe devs
    -If I do not create a multi-currency Price and just sell everything in Yen, what happens if someone orders from overseas and tries to pay in dollars?
    -Is it possible to use Stripe just for payments, and handle the products and shopping cart on my end? Is it possible to use the payment form they have
    in that case, or do I need to use their catalog system for that?
